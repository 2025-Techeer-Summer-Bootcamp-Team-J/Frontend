import React, { useState, useRef, useEffect, useCallback } from 'react';
import styled, { createGlobalStyle, keyframes } from 'styled-components';
import { analyzeSkinType } from '../services/skintypeApi';
import type { SkinTypeAnalysisResponse } from '../services/types';
import { AxiosError } from 'axios';

// --- 1. ÌÉÄÏûÖ Ï†ïÏùò ---
interface SkinResult {
    title: string;
    subtitle: string;
    description: string;
    features: string[];
    care: string[];
}

// API ÏùëÎãµÏùÑ UIÏö© SkinResultÎ°ú Î≥ÄÌôòÌïòÎäî Ìï®Ïàò
const convertApiResponseToSkinResult = (response: SkinTypeAnalysisResponse): SkinResult => {
    // ÌîºÎ∂Ä ÌÉÄÏûÖÎ≥Ñ Í∏∞Î≥∏ Ï†ïÎ≥¥ (Ïã§Ï†úÎ°úÎäî Î≥ÑÎèÑ APIÎÇò Îç∞Ïù¥ÌÑ∞Î≤†Ïù¥Ïä§ÏóêÏÑú Í∞ÄÏ†∏ÏôÄÏïº Ìï®)
    const skinTypeInfo = {
        1: {
            name: "ÏßÄÏÑ± ÌîºÎ∂Ä",
            description: "Ïú†Î∂Ñ Î∂ÑÎπÑÍ∞Ä ÌôúÎ∞úÌïòÏó¨ Î≤àÎì§Í±∞Î¶ºÏù¥ ÏûàÏßÄÎßå ÏàòÎ∂Ñ Î≥¥Ïú†Î†•Ïù¥ Ï¢ãÏùÄ ÌîºÎ∂Ä ÌÉÄÏûÖÏûÖÎãàÎã§.",
            characteristics: ["TÏ°¥ Ïú†Î∂Ñ Í≥ºÎã§", "Î™®Í≥µÏù¥ ÎöúÎ†∑Ìï®", "Ïó¨ÎìúÎ¶Ñ Î∞úÏÉù Í∞ÄÎä•ÏÑ± ÎÜíÏùå", "ÌôîÏû•Ïù¥ Ïûò ÏßÄÏõåÏßê"],
            care: ["Ïú†Î∂Ñ Ï°∞Ï†à ÌÜ†ÎÑà ÏÇ¨Ïö©", "Ï£º 2-3Ìöå Îî•ÌÅ¥Î†åÏßï", "ÏàòÎ∂Ñ ÌÅ¨Î¶ºÎ≥¥Îã§ Ï†§ ÌÉÄÏûÖ Ï†úÌíà ÏÇ¨Ïö©", "ÏûêÏô∏ÏÑ† Ï∞®Îã®Ï†ú ÌïÑÏàò"]
        },
        2: {
            name: "Ï§ëÏÑ± ÌîºÎ∂Ä",
            description: "Ïú†Î∂ÑÍ≥º ÏàòÎ∂ÑÏùò Í∑†ÌòïÏù¥ Ïûò ÎßûÎäî Ïù¥ÏÉÅÏ†ÅÏù∏ ÌîºÎ∂Ä ÌÉÄÏûÖÏúºÎ°ú, Ìä∏Îü¨Î∏îÏù¥ Ï†ÅÍ≥† ÌÉÑÎ†•Ïù¥ Ï¢ãÏäµÎãàÎã§.",
            characteristics: ["Ï†ÅÎãπÌïú Ïú†Î∂ÑÍ≥º ÏàòÎ∂Ñ", "Î™®Í≥µÏù¥ ÏûëÍ≥† ÍπîÎÅîÌï®", "Ìä∏Îü¨Î∏îÏù¥ Ï†ÅÏùå", "ÌÉÑÎ†•Ïù¥ Ï¢ãÏùå"],
            care: ["Í∏∞Î≥∏Ï†ÅÏù∏ ÏÑ∏ÏïàÍ≥º Î≥¥Ïäµ", "Ï£º 1-2Ìöå Í∞ÅÏßà Ï†úÍ±∞", "Í≥ÑÏ†àÏóê ÎßûÎäî Î≥¥Ïäµ Ï†úÌíà ÏÇ¨Ïö©", "Íæ∏Ï§ÄÌïú ÏûêÏô∏ÏÑ† Ï∞®Îã®"]
        },
        3: {
            name: "Í±¥ÏÑ± ÌîºÎ∂Ä",
            description: "Ïú†Î∂ÑÍ≥º ÏàòÎ∂ÑÏù¥ Î∂ÄÏ°±ÌïòÏó¨ ÎãπÍπÄÍ≥º Í∞ÅÏßàÏù¥ ÏÉùÍ∏∞Í∏∞ Ïâ¨Ïö¥ ÌîºÎ∂Ä ÌÉÄÏûÖÏûÖÎãàÎã§.",
            characteristics: ["ÌîºÎ∂Ä ÎãπÍπÄ ÌòÑÏÉÅ", "Í∞ÅÏßà Î∞úÏÉù", "Î™®Í≥µÏù¥ ÏûëÏùå", "Ï£ºÎ¶Ñ ÏÉùÍ∏∞Í∏∞ Ïâ¨ÏõÄ"],
            care: ["ÌíçÎ∂ÄÌïú Î≥¥Ïäµ ÌÅ¨Î¶º ÏÇ¨Ïö©", "Í∞ÅÏßà Ï†úÍ±∞Îäî Ï£º 1Ìöå", "Ïò§Ïùº Ï†úÌíà ÌôúÏö©", "ÏàòÎ∂Ñ Í≥µÍ∏â ÏßëÏ§ë Í¥ÄÎ¶¨"]
        },
        4: {
            name: "Î≥µÌï©ÏÑ± ÌîºÎ∂Ä",
            description: "TÏ°¥ÏùÄ ÏßÄÏÑ±, UÏ°¥ÏùÄ Í±¥ÏÑ±Ïùò ÌäπÏßïÏùÑ Î≥¥Ïù¥Îäî Í∞ÄÏû• ÌùîÌïú ÌîºÎ∂Ä ÌÉÄÏûÖÏûÖÎãàÎã§.",
            characteristics: ["TÏ°¥ Ïú†Î∂Ñ Í≥ºÎã§", "UÏ°¥ Í±¥Ï°∞Ìï®", "Î∂ÄÏúÑÎ≥Ñ Îã§Î•∏ Í¥ÄÎ¶¨ ÌïÑÏöî", "Í≥ÑÏ†à Î≥ÄÌôîÏóê ÎØºÍ∞ê"],
            care: ["Î∂ÄÏúÑÎ≥Ñ ÎßûÏ∂§ Í¥ÄÎ¶¨", "TÏ°¥ÏùÄ Ïú†Î∂Ñ Ï°∞Ï†à, UÏ°¥ÏùÄ Î≥¥Ïäµ", "ÏàúÌïú ÏÑ∏ÏïàÏ†ú ÏÇ¨Ïö©", "Î∂ÄÎ∂ÑÎ≥Ñ Îã§Î•∏ Ï†úÌíà ÏÇ¨Ïö©"]
        },
        5: {
            name: "ÎØºÍ∞êÏÑ± ÌîºÎ∂Ä",
            description: "Ïô∏Î∂Ä ÏûêÍ∑πÏóê ÏâΩÍ≤å Î∞òÏùëÌïòÏó¨ Î∂âÏñ¥ÏßÄÍ±∞ÎÇò Ìä∏Îü¨Î∏îÏù¥ ÏÉùÍ∏∞Í∏∞ Ïâ¨Ïö¥ ÌîºÎ∂Ä ÌÉÄÏûÖÏûÖÎãàÎã§.",
            characteristics: ["ÏâΩÍ≤å Î∂âÏñ¥Ïßê", "ÏûêÍ∑πÏóê ÎØºÍ∞ê", "ÏïåÎ†àÎ•¥Í∏∞ Î∞òÏùë Í∞ÄÎä•", "ÏñáÍ≥† ÏòàÎØºÌïú ÌîºÎ∂Ä"],
            care: ["Î¨¥Ìñ•, Î¨¥ÏÉâÏÜå Ï†úÌíà ÏÇ¨Ïö©", "Ìå®Ïπò ÌÖåÏä§Ìä∏ ÌïÑÏàò", "ÏàúÌïú ÏÑ∏ÏïàÏ†ú ÏÇ¨Ïö©", "ÏûêÍ∑πÏ†ÅÏù∏ ÏÑ±Î∂Ñ ÌîºÌïòÍ∏∞"]
        }
    };

    const skinTypeCode = response.data.skin_type_code;
    const defaultInfo = skinTypeInfo[skinTypeCode as keyof typeof skinTypeInfo] || {
        name: response.data.skin_type_name,
        description: `${response.data.skin_type_name}ÏúºÎ°ú Î∂ÑÏÑùÎêòÏóàÏäµÎãàÎã§.`,
        characteristics: ["Í∞úÏù∏Î≥Ñ ÌäπÏÑ±Ïóê Îî∞Îùº Îã§Î•º Ïàò ÏûàÏäµÎãàÎã§."],
        care: ["Ï†ÑÎ¨∏Í∞ÄÏôÄ ÏÉÅÎã¥ÌïòÏó¨ ÎßûÏ∂§ Í¥ÄÎ¶¨Î•º Î∞õÏúºÏãúÍ∏∞ Î∞îÎûçÎãàÎã§."]
    };

    return {
        title: defaultInfo.name,
        subtitle: response.data.skin_type_name,
        description: defaultInfo.description,
        features: defaultInfo.characteristics,
        care: defaultInfo.care
    };
};

// --- 2. Í∏ÄÎ°úÎ≤å Ïä§ÌÉÄÏùº Î∞è ÌÖåÎßà ---
const theme = {
    primaryColor: '#0052ff',
    lightPrimaryColor: '#e9efff',
    darkPrimaryColor: '#0041cc',
    textColor: '#333',
    lightTextColor: '#666',
    bgColor: '#f0f4ff',
    cardBgColor: '#ffffff',
};

const GlobalStyle = createGlobalStyle`
    /* Google Noto Sans KR Ìè∞Ìä∏ import */
    @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+KR:wght@400;500;700&display=swap');

    html {
        scroll-behavior: smooth;
    }

    body {
        font-family: 'Noto Sans KR', sans-serif;
        margin: 0;
        background-color: ${() => theme.bgColor};
        color: ${() => theme.textColor};
    }
`;

// --- 3. Ïï†ÎãàÎ©îÏù¥ÏÖò (Keyframes) ---
const fadeIn = keyframes`
    from { opacity: 0; transform: translateY(1.25rem); }
    to { opacity: 1; transform: translateY(0); }
`;

const scan = keyframes`
    0% { top: 0; }
    100% { top: 100%; }
`;

// --- 4. Ïä§ÌÉÄÏùº Ïª¥Ìè¨ÎÑåÌä∏ ---

const PageWrapper = styled.div`
  background-color: ${() => theme.bgColor};
  width: 100%;
  min-height: 100vh;
  padding: 0.1px; /* üëà [Ï∂îÍ∞ÄÎêú Î∂ÄÎ∂Ñ] ÏûêÏãù margin ÏÉÅÏáÑÎ•º Î∞©ÏßÄÌïòÎäî Ìä∏Î¶≠ */
`;

const MainContainer = styled.main`
    text-align: center;
    padding: 0 1.25rem;
    width: 100%;
    max-width: 62.5rem;
    box-sizing: border-box;
    margin: 1.25rem auto;
`;

const PageSection = styled.section<{ $isFadedIn?: boolean }>`
    padding: 3.75rem 0;
    min-height: 70vh;
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    width: 100%;
    opacity: 0;
    animation: ${({ $isFadedIn }) => $isFadedIn ? fadeIn : 'none'} 0.8s ease-out forwards;
    
    &:first-child {
        padding-top: 1.25rem;
    }
`;

const MainTitle = styled.h1`
    font-size: clamp(2rem, 5vw, 2.5rem);
    font-weight: 700;
    color: #1a1a1a;
    margin-bottom: 0.625rem;
`;

const MainSubtitle = styled.p`
    font-size: clamp(0.9rem, 2vw, 1.1rem);
    color: ${theme.lightTextColor};
    margin-bottom: 2.5rem;
`;

const ContentBox = styled.div`
    background-color: ${theme.cardBgColor};
    border-radius: 1.25rem;
    padding: 2.5rem;
    display: flex;
    flex-direction: column;
    align-items: center;
    width: 100%;
    max-width: 56.25rem;
    margin: 0 auto;
    box-shadow: 0 0.25rem 1.25rem rgba(0, 82, 255, 0.05);
    text-align: left;
    gap: 2.5rem;
    @media (min-width: 768px) {
        flex-direction: row;
    }
`;

const Guidelines = styled.div`
    width: 100%;
    h3 {
        font-size: 1.25rem;
        font-weight: 700;
        margin-top: 0;
        margin-bottom: 1.5rem;
        color: ${theme.primaryColor};
        text-align: center;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 0.625rem;
    }
    @media (min-width: 768px) { flex-basis: 50%; }
`;

const GuidelineItem = styled.div`
    background-color: ${theme.lightPrimaryColor};
    padding: 1.125rem 1.5rem;
    border-radius: 0.625rem;
    margin-bottom: 1rem;
    font-size: 0.95rem;
    font-weight: 500;
    display: flex;
    align-items: center;
    i {
        margin-right: 1rem;
        color: ${theme.primaryColor};
        flex-shrink: 0;
        width: 1.2em;
        text-align: center;
    }
`;

const UploadArea = styled.div`
    width: 100%;
    height: 18.75rem;
    border: 2px dashed #d0d8e8;
    border-radius: 0.625rem;
    display: flex;
    justify-content: center;
    align-items: center;
    background-color: #f9faff;
    cursor: pointer;
    transition: all 0.3s;
    position: relative;
    overflow: hidden;
    &:hover {
        border-color: ${theme.primaryColor};
        background-color: #f0f4ff;
    }
    @media (min-width: 768px) { flex-basis: 50%; }
`;

const UploadAreaContent = styled.div`
    text-align: center;
    color: #888;
    font-weight: 500;
    i {
        font-size: 3rem;
        margin-bottom: 1rem;
        color: #ccc;
    }
`;

const PreviewImage = styled.img`
    width: 100%;
    height: 100%;
    object-fit: cover;
    position: absolute;
    top: 0;
    left: 0;
`;

const AnalysisStartButton = styled.button`
    display: inline-flex;
    align-items: center;
    gap: 0.625rem;
    margin-top: 2rem;
    padding: 1.25rem 2.5rem;
    background-color: ${theme.primaryColor};
    color: white;
    border: none;
    border-radius: 0.625rem;
    cursor: pointer;
    font-weight: 700;
    font-size: 1.1rem;
    transition: all 0.3s;
    box-shadow: 0 0.25rem 1rem rgba(0, 82, 255, 0.2);
    
    &:hover {
        background-color: ${theme.darkPrimaryColor};
        transform: translateY(-2px);
        box-shadow: 0 0.375rem 1.25rem rgba(0, 82, 255, 0.3);
    }
    
    &:disabled {
        background-color: #ccc;
        cursor: not-allowed;
        transform: none;
        box-shadow: none;
    }
    
    i {
        font-size: 1.2em;
    }
`;

const ScannerAnimation = styled.div<{ $imageUrl?: string }>`
    width: 9.375rem;
    height: 9.375rem;
    position: relative;
    border-radius: 50%;
    border: 3px solid ${theme.lightPrimaryColor};
    background-image: url(${({ $imageUrl }) => $imageUrl || 'https://placehold.co/150x150/ffffff/cccccc?text=Face'});
    background-size: cover;
    background-position: center;
    overflow: hidden;
`;

const ScannerLine = styled.div`
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, transparent, rgba(0, 82, 255, 0.7), transparent);
    animation: ${scan} 3s linear infinite;
`;

const AnalyzingText = styled.h2`
    font-size: 1.5rem;
    font-weight: 700;
    color: #1a1a1a;
    margin-top: 2rem;
`;

const AnalyzingStatus = styled.p`
    font-size: 1rem;
    color: ${theme.lightTextColor};
    margin-top: 0.625rem;
    min-height: 1.5rem;
    transition: all 0.3s;
`;

const ResultHeader = styled.div`
    text-align: center;
    margin-bottom: 2.5rem;
    width: 100%;
`;

const ResultCard = styled.div`
    background: ${theme.cardBgColor};
    border-radius: 1.25rem;
    padding: 2rem;
    box-shadow: 0 0.25rem 1.25rem rgba(0, 82, 255, 0.05);
    width: 100%;
    max-width: 56.25rem;
    box-sizing: border-box;
    text-align: left;
`;

const ResultTitle = styled.h2`
    font-size: clamp(1.5rem, 4vw, 1.8rem);
    font-weight: 700;
    color: ${theme.primaryColor};
    margin: 0 0 0.25rem 0;
`;

const ResultSubtitle = styled.h3`
    font-size: clamp(1rem, 3vw, 1.1rem);
    font-weight: 500;
    color: ${theme.textColor};
    margin: 0 0 1.25rem 0;
`;

const ResultDescription = styled.p`
    font-size: 1rem;
    line-height: 1.7;
    color: #555;
    margin: 0;
`;

const ResultGrid = styled.div`
    display: grid;
    grid-template-columns: 1fr;
    gap: 1.875rem;
    width: 100%;
    max-width: 56.25rem;
    margin-top: 1.875rem;
    @media (min-width: 768px) {
        grid-template-columns: repeat(2, 1fr);
    }
`;

const ResultSectionTitle = styled.h4`
    font-size: 1.25rem;
    font-weight: 700;
    color: #1a1a1a;
    margin: 0 0 1.25rem 0;
    padding-bottom: 0.625rem;
    border-bottom: 2px solid ${theme.lightPrimaryColor};
    display: flex;
    align-items: center;
    i {
        margin-right: 0.625rem;
        color: ${theme.primaryColor};
    }
`;

const ResultList = styled.ul`
    list-style: none;
    padding: 0;
    margin: 0;
    li {
        background-color: #f9faff;
        padding: 1rem;
        border-radius: 0.5rem;
        margin-bottom: 0.625rem;
        color: ${theme.textColor};
        font-weight: 500;
    }
`;

const RestartButton = styled.a`
    display: inline-flex;
    align-items: center;
    gap: 0.625rem;
    margin-top: 2.5rem;
    padding: 1rem 2rem;
    background-color: ${theme.primaryColor};
    color: white;
    border: none;
    border-radius: 0.625rem;
    cursor: pointer;
    font-weight: 700;
    font-size: 1rem;
    transition: all 0.3s;
    box-shadow: 0 0.25rem 1rem rgba(0, 82, 255, 0.2);
    text-decoration: none;
    &:hover {
        background-color: ${theme.darkPrimaryColor};
        transform: translateY(-2px);
        box-shadow: 0 0.375rem 1.25rem rgba(0, 82, 255, 0.3);
    }
    i {
        font-size: 1em;
    }
`;






// --- 6. React Ïª¥Ìè¨ÎÑåÌä∏ ---
const SkinAnalysis: React.FC = () => {
    type Section = 'upload' | 'analyzing' | 'result' | 'error';
    const [currentSection, setCurrentSection] = useState<Section>('upload');
    const [uploadedImageUrl, setUploadedImageUrl] = useState<string | null>(null);
    const [uploadedFile, setUploadedFile] = useState<File | null>(null);
    const [analysisStatus, setAnalysisStatus] = useState<string>('Ï¥àÍ∏∞Ìôî Ï§ë...');
    const [resultData, setResultData] = useState<SkinResult | null>(null);
    const [hasAnalyzed, setHasAnalyzed] = useState<boolean>(false);
    const [analysisError, setAnalysisError] = useState<string | null>(null);
    const [isImageUploaded, setIsImageUploaded] = useState<boolean>(false);

    const uploadSectionRef = useRef<HTMLElement>(null);
    const analyzingSectionRef = useRef<HTMLElement>(null);
    const resultSectionRef = useRef<HTMLElement>(null);
    const errorSectionRef = useRef<HTMLElement>(null);
    const fileInputRef = useRef<HTMLInputElement>(null);

    // ÏûÑÏãú ÏÇ¨Ïö©Ïûê ID (Ïã§Ï†úÎ°úÎäî Î°úÍ∑∏Ïù∏ ÏÉÅÌÉúÏóêÏÑú Í∞ÄÏ†∏ÏôÄÏïº Ìï®)
    const userId = 1;

    // APIÎ°ú ÌîºÎ∂Ä Î∂ÑÏÑù ÏöîÏ≤≠
    const performSkinAnalysis = useCallback(async (imageFile: File) => {
        try {
            setAnalysisError(null);
            console.log('ÌîºÎ∂Ä Î∂ÑÏÑù ÏãúÏûë:', { userId, imageFile: imageFile.name, size: imageFile.size });
            
            // ÌîºÎ∂Ä ÌÉÄÏûÖ Î∂ÑÏÑù API Ìò∏Ï∂ú
            const analysisResponse = await analyzeSkinType(userId, { image: imageFile });
            console.log('Î∂ÑÏÑù ÏùëÎãµ:', analysisResponse);
            
            // ÏÉàÎ°úÏö¥ API ÏùëÎãµ Íµ¨Ï°∞Ïóê ÎßûÍ≤å Í≤∞Í≥º Ï≤òÎ¶¨
            const skinResult = convertApiResponseToSkinResult(analysisResponse);
            console.log('ÏµúÏ¢Ö Í≤∞Í≥º Îç∞Ïù¥ÌÑ∞:', skinResult);
            
            setResultData(skinResult);
            setHasAnalyzed(true);
            setCurrentSection('result');
        } catch (error) {
            console.error('ÌîºÎ∂Ä Î∂ÑÏÑù Ïã§Ìå®:', error);
            let errorMessage = 'Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.';
            
            if (error instanceof Error) {
                errorMessage = error.message;
            } else if (error && typeof error === 'object' && 'response' in error) {
                // Axios ÏóêÎü¨Ïù∏ Í≤ΩÏö∞
                const axiosError = error as AxiosError<{ error?: string }>;
                if (axiosError.response?.data?.error) {
                    errorMessage = axiosError.response.data.error;
                } else if (axiosError.response?.status === 404) {
                    errorMessage = 'API ÏÑúÎ≤ÑÏóê Ïó∞Í≤∞Ìï† Ïàò ÏóÜÏäµÎãàÎã§. ÏÑúÎ≤ÑÍ∞Ä Ïã§Ìñâ Ï§ëÏù∏ÏßÄ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.';
                } else if (axiosError.response?.status && axiosError.response.status >= 500) {
                    errorMessage = 'ÏÑúÎ≤Ñ ÎÇ¥Î∂Ä Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§. Ïû†Ïãú ÌõÑ Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.';
                } else if (axiosError.code === 'NETWORK_ERROR' || axiosError.code === 'ECONNREFUSED') {
                    errorMessage = 'ÎÑ§Ìä∏ÏõåÌÅ¨ Ïó∞Í≤∞Ïóê Î¨∏Ï†úÍ∞Ä ÏûàÏäµÎãàÎã§. Ïù∏ÌÑ∞ÎÑ∑ Ïó∞Í≤∞ÏùÑ ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.';
                }
            }
            
            setAnalysisError(errorMessage);
            setCurrentSection('error');
        }
    }, [userId]);

    const handleUploadAreaClick = useCallback(() => {
        // Ïù¥ÎØ∏ Î∂ÑÏÑùÏùÑ ÏãúÏûëÌñàÏúºÎ©¥ Îã§Ïãú ÏóÖÎ°úÎìú Ï∞ΩÏùÑ Ïó¥ÏßÄ ÏïäÏùå
        if (currentSection !== 'upload' || hasAnalyzed) return;
        fileInputRef.current?.click();
    }, [currentSection, hasAnalyzed]);

    const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
        const file = event.target.files?.[0];
        if (file && !hasAnalyzed) {
            const reader = new FileReader();
            reader.onload = (e) => {
                const imageUrl = e.target?.result as string;
                setUploadedImageUrl(imageUrl);
                setUploadedFile(file);
                setIsImageUploaded(true);
                // ÏûêÎèôÏúºÎ°ú analyzing ÏÑπÏÖòÏúºÎ°ú Ïù¥ÎèôÌïòÏßÄ ÏïäÏùå
            };
            reader.readAsDataURL(file);
        }
    }, [hasAnalyzed]);

    // Î∂ÑÏÑù ÏãúÏûë Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
    const handleStartAnalysis = useCallback(() => {
        if (uploadedFile && !hasAnalyzed) {
            setCurrentSection('analyzing');
        }
    }, [uploadedFile, hasAnalyzed]);
    
    const handleRestart = useCallback((e: React.MouseEvent<HTMLAnchorElement>) => {
        e.preventDefault();
        setUploadedImageUrl(null);
        setUploadedFile(null);
        setResultData(null);
        setHasAnalyzed(false);
        setAnalysisError(null);
        setIsImageUploaded(false);
        if (fileInputRef.current) {
            fileInputRef.current.value = '';
        }
        setCurrentSection('upload');
    }, []);

    useEffect(() => {
        let analysisTimer: ReturnType<typeof setTimeout>;
        let statusInterval: ReturnType<typeof setInterval>;

        if (currentSection === 'upload') {
            uploadSectionRef.current?.scrollIntoView({ behavior: 'smooth', block: 'start' });
        } else if (currentSection === 'analyzing') {
            analyzingSectionRef.current?.scrollIntoView({ behavior: 'smooth', block: 'center' });
            
            const statuses = ["Î™®Í≥µ Ìå®ÌÑ¥ Î∂ÑÏÑù Ï§ë...", "Ïú†Î∂ÑÎüâ Ï∏°Ï†ï Ï§ë...", "ÏàòÎ∂Ñ Î†àÎ≤® ÌôïÏù∏ Ï§ë...", "ÌîºÎ∂ÄÌÜ§ Î∂ÑÏÑù Ï§ë...", "Ìä∏Îü¨Î∏î ÏöîÏù∏ ÌôïÏù∏ Ï§ë...", "Í≤∞Í≥ºÎ•º Ï¢ÖÌï©ÌïòÎäî Ï§ë..."];
            let statusIndex = 0;
            setAnalysisStatus(statuses[statusIndex]);

            statusInterval = setInterval(() => {
                statusIndex++;
                if (statusIndex < statuses.length) {
                    setAnalysisStatus(statuses[statusIndex]);
                }
            }, 1000);

            // API Ìò∏Ï∂ú (1ÌöåÎßå Ïã§ÌñâÎêòÎèÑÎ°ù hasAnalyzed Ï≤¥ÌÅ¨)
            analysisTimer = setTimeout(() => {
                if (uploadedFile && !hasAnalyzed) {
                    performSkinAnalysis(uploadedFile);
                }
            }, statuses.length * 1000);

        } else if (currentSection === 'result') {
            resultSectionRef.current?.scrollIntoView({ behavior: 'smooth', block: 'center' });
        } else if (currentSection === 'error') {
            errorSectionRef.current?.scrollIntoView({ behavior: 'smooth', block: 'center' });
        }
        
        return () => {
            clearTimeout(analysisTimer);
            clearInterval(statusInterval);
        };
    }, [currentSection, uploadedFile, hasAnalyzed, performSkinAnalysis]);
    
    return (
        <PageWrapper>
            <GlobalStyle />
            <MainContainer>
                {/* ÏÑπÏÖò 1: ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú (Ìï≠ÏÉÅ Î≥¥ÏûÑ) */}
                <PageSection ref={uploadSectionRef} $isFadedIn={true}>
                    <MainTitle>ÎÇòÏùò ÌîºÎ∂Ä Ïú†Ìòï Î∞îÎ°ú ÏïåÍ∏∞</MainTitle>
                    <MainSubtitle>AIÍ∞Ä ÎãπÏã†Ïùò ÌîºÎ∂Ä ÌÉÄÏûÖÏùÑ Î∂ÑÏÑùÌïòÍ≥†, Ïú†ÌòïÎ≥Ñ ÌäπÏßïÍ≥º ÌÜµÍ≥ÑÎ•º Ï†úÍ≥µÌï©ÎãàÎã§.</MainSubtitle>
                    <ContentBox>
                        <Guidelines>
                            <h3><i className="fas fa-camera-retro" /> Ï¥¨ÏòÅ Í∞ÄÏù¥Îìú</h3>
                            <GuidelineItem><i className="fas fa-user" /> Ï†ïÎ©¥ÏùÑ ÏùëÏãúÌïòÍ≥†, Î®∏Î¶¨Ïπ¥ÎùΩÏù¥ ÏñºÍµ¥ÏùÑ Í∞ÄÎ¶¨ÏßÄ ÏïäÍ≤å ÌïòÏÑ∏Ïöî.</GuidelineItem>
                            <GuidelineItem><i className="fas fa-lightbulb" /> Í∑∏Î¶ºÏûê ÏóÜÎäî Î∞ùÏùÄ Ï°∞Î™Ö ÏïÑÎûòÏóêÏÑú ÏÑ†Î™ÖÌïòÍ≤å Ï¥¨ÏòÅÌïòÏÑ∏Ïöî.</GuidelineItem>
                            <GuidelineItem><i className="fas fa-tint-slash" /> ÌôîÏû•Í∏∞ ÏóÜÎäî Îß® ÏñºÍµ¥ÏóêÏÑú Í∞ÄÏû• Ï†ïÌôïÌïú Î∂ÑÏÑùÏù¥ Í∞ÄÎä•Ìï©ÎãàÎã§.</GuidelineItem>
                        </Guidelines>
                        <UploadArea onClick={handleUploadAreaClick} style={{ cursor: currentSection === 'upload' ? 'pointer' : 'default' }}>
                            {/* ÏóÖÎ°úÎìú Ïù¥ÌõÑÏóêÎèÑ Ïù¥ÎØ∏ÏßÄÍ∞Ä Î≥¥Ïù¥ÎèÑÎ°ù ÏàòÏ†ï */}
                            {!uploadedImageUrl && (
                                <UploadAreaContent>
                                    <i className="fas fa-cloud-upload-alt" />
                                    <p>ÌÅ¥Î¶≠ÌïòÏó¨ ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú</p>
                                </UploadAreaContent>
                            )}
                            {uploadedImageUrl && <PreviewImage src={uploadedImageUrl} alt="ÏóÖÎ°úÎìú Ïù¥ÎØ∏ÏßÄ ÎØ∏Î¶¨Î≥¥Í∏∞" />}
                            <input type="file" ref={fileInputRef} onChange={handleFileUpload} style={{ display: 'none' }} accept="image/*" disabled={currentSection !== 'upload'} />
                        </UploadArea>
                    </ContentBox>
                    
                    {/* ÏÇ¨ÏßÑ ÏóÖÎ°úÎìú ÌõÑ Î∂ÑÏÑù ÏãúÏûë Î≤ÑÌäº ÌëúÏãú */}
                    {isImageUploaded && currentSection === 'upload' && (
                        <AnalysisStartButton onClick={handleStartAnalysis}>
                            <i className="fas fa-brain" />
                            AI ÌîºÎ∂Ä Î∂ÑÏÑù ÏãúÏûëÌïòÍ∏∞
                        </AnalysisStartButton>
                    )}
                </PageSection>

                {/* ÏÑπÏÖò 2: Î∂ÑÏÑù Ï§ë (ÏóÖÎ°úÎìú Ïù¥ÌõÑÏóê Î≥¥ÏûÑ) */}
                {(currentSection === 'analyzing' || currentSection === 'result') && (
                    <PageSection ref={analyzingSectionRef} $isFadedIn={true}>
                        <ScannerAnimation $imageUrl={uploadedImageUrl || undefined}>
                            {currentSection === 'analyzing' && <ScannerLine />}
                        </ScannerAnimation>
                        <AnalyzingText>
                            {currentSection === 'analyzing' ? 'AIÍ∞Ä ÌîºÎ∂ÄÎ•º Î∂ÑÏÑùÌïòÍ≥† ÏûàÏäµÎãàÎã§.' : 'AI ÌîºÎ∂Ä Î∂ÑÏÑù ÏôÑÎ£å'}
                        </AnalyzingText>
                        <AnalyzingStatus>
                            {currentSection === 'analyzing' ? analysisStatus : 'ÏïÑÎûòÏóêÏÑú ÏßÑÎã® Í≤∞Í≥ºÎ•º ÌôïÏù∏ÌïòÏÑ∏Ïöî.'}
                        </AnalyzingStatus>
                    </PageSection>
                )}
                
                {/* ÏÑπÏÖò 3: Í≤∞Í≥º (Î∂ÑÏÑù ÏôÑÎ£å ÌõÑÏóê Î≥¥ÏûÑ) */}
                {currentSection === 'result' && resultData && (
                    <PageSection ref={resultSectionRef} $isFadedIn={true}>
                        <ResultHeader>
                            <MainTitle>AI ÌîºÎ∂Ä ÏßÑÎã® Í≤∞Í≥º</MainTitle>
                            <MainSubtitle>ÎãπÏã†Ïùò ÌîºÎ∂Ä ÌÉÄÏûÖÍ≥º ÎßûÏ∂§ Í¥ÄÎ¶¨Î≤ïÏùÑ ÌôïÏù∏Ìï¥Î≥¥ÏÑ∏Ïöî.</MainSubtitle>
                        </ResultHeader>
                        
                        <ResultCard>
                            <ResultTitle>{resultData.title}</ResultTitle>
                            <ResultSubtitle>{resultData.subtitle}</ResultSubtitle>
                            <ResultDescription>{resultData.description}</ResultDescription>
                        </ResultCard>
                        
                        <ResultGrid>
                            <ResultCard>
                                <ResultSectionTitle><i className="fas fa-list-check" /> Ï£ºÏöî ÌäπÏßï</ResultSectionTitle>
                                <ResultList>
                                    {resultData.features.map((item, index) => <li key={index}>{item}</li>)}
                                </ResultList>
                            </ResultCard>
                            <ResultCard>
                                <ResultSectionTitle><i className="fas fa-hand-holding-heart" /> Ï∂îÏ≤ú Í¥ÄÎ¶¨Î≤ï</ResultSectionTitle>
                                <ResultList>
                                    {resultData.care.map((item, index) => <li key={index}>{item}</li>)}
                                </ResultList>
                            </ResultCard>
                        </ResultGrid>

                        <RestartButton href="#upload" onClick={handleRestart}>
                           <i className="fas fa-redo" /> Ï≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú ÏßÑÎã®ÌïòÍ∏∞
                        </RestartButton>
                    </PageSection>
                )}

                {/* ÏÑπÏÖò 4: ÏóêÎü¨ (Î∂ÑÏÑù Ïã§Ìå® Ïãú Î≥¥ÏûÑ) */}
                {currentSection === 'error' && (
                    <PageSection ref={errorSectionRef} $isFadedIn={true}>
                        <ResultHeader>
                            <MainTitle style={{ color: '#ff4757' }}>Î∂ÑÏÑù Ï§ë Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§</MainTitle>
                            <MainSubtitle> Ï°∞Í±¥Ïóê ÎßûÎäî ÏÇ¨ÏßÑÏùÑ ÌôïÏù∏ÌïòÍ≥† Îã§Ïãú ÏãúÎèÑÌï¥Ï£ºÏÑ∏Ïöî.</MainSubtitle>
                        </ResultHeader>
                        
                        <ResultCard>
                            <ResultDescription style={{ color: '#ff4757', textAlign: 'center' }}>
                                <i className="fas fa-exclamation-triangle" style={{ fontSize: '3rem', marginBottom: '1rem', display: 'block' }} />
                                {analysisError || 'Î∂ÑÏÑù Ï§ë Ïïå Ïàò ÏóÜÎäî Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏäµÎãàÎã§.'}
                            </ResultDescription>
                        </ResultCard>

                        <RestartButton href="#upload" onClick={handleRestart}>
                           <i className="fas fa-redo" /> Ï≤òÏùåÎ∂ÄÌÑ∞ Îã§Ïãú ÏßÑÎã®ÌïòÍ∏∞
                        </RestartButton>
                    </PageSection>
                )}
            </MainContainer>
        </PageWrapper>
    );
};

export default SkinAnalysis;